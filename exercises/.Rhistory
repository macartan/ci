declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)
design |> redesign(rho = c(-.99, -.5, 0, .5, .99)) |>
diagnose_desgin() |>
write_rds("saved/1.3.rds")
design |> redesign(rho = c(-.99, -.5, 0, .5, .99)) |>
diagnose_design(sims = 200) |>
write_rds("saved/1.3.rds")
diagnosis <- read_rds("saved/1.3.rds")
diagnosis
diagnosis$simulations_df |> ggplot(aes(estimates)) |>
geom_histogram(estimate)
diagnosis$simulations_df |> ggplot(aes(estimates)) +
geom_histogram(estimate)
diagnosis$simulations_df |> head()
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram(estimate)
diagnosis$simulations_df |> ggplot(aes(estimate))
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram(estimate)
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram()
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(~rho)
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(rho~.)
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(rho~.)
design |> redesign(rho = c(-.99, -.5, 0, .5, .99)) |>
diagnose_design(sims = 2000) |>
write_rds("saved/1.3.rds")
diagnosis <- read_rds("saved/1.3.rds")
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(rho~.)
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_point()
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_hline(yintecept = .95)
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_hline(yintercept = .95)
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_hline(yintercept = .95)
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_line() +
geom_hline(yintercept = .95)
diagnosis$diagnosands_df |> ggplot(aes(rho, coverage)) +
geom_line() +
geom_hline(yintercept = .95, color = "red")
design |> redesign(rho = seq(-1, 1, length = 7)) |>
diagnose_design(sims = 2000) |>
write_rds("saved/1.3.rds")
? lm_lin
design <-
declare_design(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X))
library(DeclareDesign)
design <-
declare_design(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X))
design <-
declare_model(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X))
declare_estimator(Y ~ X_demeaned*W, label = "interacted")
design
design
design <-
declare_model(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X)) +
declare_estimator(Y ~ X_demeaned*W, label = "interacted")
design
get_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
data <- draw_data(design = )
data <- draw_data(design)
data |> View()
lm_robust(Y ~ X_demeaned*W, data = data)
get_estimates(design, data)
diagnose_design(design) |> write_rds("saved/1.4.rds")
read_rds("saved/1.4.rds") |> kable()
diagnose_design(design) |> write_rds("saved/2.4.rds")
diagnosis <- read_rds("saved/2.3.rds")
diagnosis <- read_rds("saved/1.3.rds")
diagnosis |> write_rds("saved/2.3.rds")
diagnosis <- read_rds("saved/2.3.rds")
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(~rho)
rho = 0
design <-
declare_model(N = 1000,
Y_Z_0 = rnorm(N),
Y_Z_1 = 1 + correlate(rnorm, given = Y_Z_0, rho = rho)) +
declare_inquiry(ate = mean(Y_Z_1 - Y_Z_0)) +
declare_assignment(Z = simple_ra(N), Y = reveal_outcomes(Y ~ Z)) +
declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)
design |> redesign(rho = seq(-1, 1, length = 5)) |>
diagnose_design(sims = 2000) |>
write_rds("saved/2.3.rds")
diagnosis <- read_rds("saved/2.3.rds")
diagnosis <- read_rds("saved/2.3.rds")
diagnosis$simulations_df |> ggplot(aes(estimate)) +
geom_histogram() + facet_grid(~rho)
design <-
declare_model(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X)) +
declare_estimator(Y ~ X_demeaned*W, label = "interacted")
diagnose_design(design) |> write_rds("saved/2.4.rds")
pars
pars <- list(run = TRUE)
diagnose_design(design) |> write_rds("saved/2.4.rds")
read_rds("saved/2.4.rds") |> kable()
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> kable()
design <-
declare_model(N = 10000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(X_demeaned = X - mean(X)) +
declare_estimator(Y ~ X_demeaned*W, label = "interacted")
df <- draw_data(design)
df$X |> table()
table(df$X, df$W)
lm_robust(Y~X + W, data = df)
.25.(.25 + .16)
.25/(.25 + .16)
lm_robust(Y~X*W, data = df)
lm_robust(Y~X_demean*W, data = df)
lm_robust(Y~X_demeaned*W, data = df)
with(df, table(X, X_demeaned))
table(df$X)
design <-
declare_model(N = 10000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(W_demeaned = W - mean(W)) +
declare_estimator(Y ~ X*W_demeaned, label = "interacted")
diagnose_design(design) |> write_rds("saved/2.4.rds")
diagnose_design(design) |> write_rds("saved/2.4.rds")
params
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Bias, Coverage) |>  kable()
diagnose_design(design) |> write_rds("saved/2.4.rds")
params <- list(run = TRUE)
diagnose_design(design) |> write_rds("saved/2.4.rds")
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Bias, Coverage) |>  kable()
design <-
declare_model(N = 10000,
W = rbinom(N, 1, .5),
U = rnorm(N),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(W_demeaned = W - mean(W)) +
declare_estimator(Y ~ X*W_demeaned, label = "interacted")
draw_estiamtes(design)
draw_estimates(design)
design <-
declare_model(N = 1000,
W = rbinom(N, 1, .5),
U = rnorm(N, 0, .1),
X = rbinom(N, 1, .2 + .3*W),
Y = X*W + U) +
declare_inquiry(ATE = mean(W)) +
declare_estimator(Y ~ X, label = "naive") +
declare_estimator(Y ~ X + W, label = "control") +
declare_measurement(W_demeaned = W - mean(W)) +
declare_estimator(Y ~ X*W_demeaned, label = "interacted")
diagnose_design(design) |> write_rds("saved/2.4.rds")
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Bias, Coverage) |>  kable()
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
draw_estimates(design)
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Bias, Coverage) |>  kable()
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Bias, Coverage)
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, Estimate, Bias, Coverage) |>  kable()
read_rds("saved/2.4.rds") |> reshape_diagnosis()
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, 'Estimand', 'Mean Estimate', Bias, Coverage) |>  kable()
read_rds("saved/2.4.rds") |> reshape_diagnosis() |> select(Estimator, 'Mean Estimand', 'Mean Estimate', Bias, Coverage)
.45/.95
.05/.95
? lm_robust()
b = 0
design <-
declare_model(
N = 1000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K = rbinom(N, 1, .25*X + .25*Y + b*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K == 1)
params$run
params$run <- TRUE
design |> redesign(b = seq(-.2, .2, length = 5)) |> diagnose_design() |> write_rds("saved/4.1.rds")
read_rds("saved/4.1.rds")
design |> redesign(b = seq(-.2, .5, length = 5)) |> diagnose_design()
diagnosis <- read_rds("saved/4.1.rds")
diagnosis
design |> redesign(b = seq(-.25, .5, length = 5)) |> diagnose_design()
design |> redesign(b = seq(-.25, .5, length = 5)) |> diagnose_design() |> write_rds("saved/4.1.rds")
diagnosis <- read_rds("saved/4.1.rds")
diagnosis |>  kable()
diagnosis <- read_rds("saved/4.1.rds")
diagnosis
diagnosis
design <-
declare_model(
N = 1000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .1*X + .1*Y + .6*X*Y),
K2 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y))) +
design <-
declare_model(
N = 1000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .1*X + .1*Y + .6*X*Y),
K2 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design |> diagnose_design()
design <-
declare_model(
N = 1000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .1*X + .1*Y + .8*X*Y),
K2 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design |> diagnose_design()
design <-
declare_model(
N = 1000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .05*X + .05*Y + .9*X*Y),
K2 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design <-
declare_model(
N = 10000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .05*X + .05*Y + .9*X*Y),
K2 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design |> diagnose_design()
df <- draw_data(design)
df$K1 > table()
df$K1 |> table()
with(df |> select(K1 == 1), table(X, Y))
with(df |> filter(K1 == 1), table(X, Y))
design <-
declare_model(
N = 10000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .05*X + .05*Y + .9*X*Y),
K2 = rbinom(N, 1, .4*X + .4*Y + .1*X*Y),
K3 = rbinom(N, 1, .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")+
declare_estimator(Y ~ X, subset = K3 == 1, label = "K3 conditioning")
design |> redesign(b = seq(-.25, .5, length = 5)) |> diagnose_design() |> write_rds("saved/4.1.rds")
design <-
declare_model(
N = 10000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .1 + .05*X + .05*Y + .7*X*Y),
K2 = rbinom(N, 1, .1 + .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design |> diagnose_design()
design |>  diagnose_design() |> write_rds("saved/4.1.rds")
diagnosis <- read_rds("saved/4.1.rds")
diagnosis |>  reshaep_diagnosis |> select(Estimator, 'Mean estimate', "Bias") |> kable()
diagnosis |>  reshape_diagnosis() |> select(Estimator, 'Mean estimate', "Bias") |> kable()
diagnosis |>  reshape_diagnosis() |> select(Estimator, 'Mean Estimate', "Bias") |> kable()
design <-
declare_model(
N = 10000,
X = rbinom(N, 1, .5),
Y = rbinom(N, 1, .5),
K1 = rbinom(N, 1, .1 + .05*X + .05*Y + .7*X*Y),
K2 = rbinom(N, 1, .1 + .2*X + .2*Y + -.2*X*Y)) +
declare_inquiry(ATE = 0) +
declare_estimator(Y ~ X,  label = "No conditioning")+
declare_estimator(Y ~ X, subset = K1 == 1, label = "K1 conditioning")+
declare_estimator(Y ~ X, subset = K2 == 1, label = "K2 conditioning")
design |>  diagnose_design() |> write_rds("saved/4.1.rds")
diagnosis <- read_rds("saved/4.1.rds")
expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2) |>
kable()
df <- expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2)
df |> filter(A==1) |> mutate(p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> mutate(p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> summarize(p = p/sum(p))
df |> group_by(A, B, C) |> summarize(p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> summarize(p = p/sum(p))
df |> filter(A==1) |> group_by(B, C) |> summarize(p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> summarize(p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> summarize(C = mean(C), p = p/sum(p))
df |> filter(A==1) |> group_by(B) |> mutate(p = p/sum(p)) |> ungroup()
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()
df |> group_by(A, C) |> mutate(p = p/sum(p)) |> ungroup() |>
kable("Given A the probability of C does not depend on B: B and C are onditionallt independent given A")
df |> group_by(A, C) |> mutate(p = p/sum(p)) |> ungroup() |>
kable("Given A the probability of C does not depend on B: B and C are onditionallt independent given A")
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup() |>
kable("Given A the probability of C does not depend on B: B and C are condtionally independent given A")
library(knitr)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup() |>
kable("Given A the probability of C does not depend on B: B and C are condtionally independent given A")
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup() |>
kable(caption = "Given A the probability of C does not depend on B: B and C are condtionally independent given A")
df |> group_by(A, C) |> mutate(p = p/sum(p)) |> ungroup() |>
kable(caption = "Given A the probability of C does not depend on B: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> arrange(B, A, C ) |>
kable(caption = "Given A the probability of C does not depend on B: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, A, C ) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, A, C, p ) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, A, C, p ) |> arrange(B) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, A, C, p ) |> arrange(B, C) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, A, C, p ) |> arrange(B, C) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, C, A, p ) |> arrange(B, C) |>
kable(caption = "Given B the probability of A does not depend on C: B and C are conditionally independent given A")
expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2) |>
kable()
df <- expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup() |>
kable(caption = "Given A the probability of C does not depend on B: B and C are condtionally independent given A")
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, C, A, p ) |> arrange(B, C) |>
kable(caption = "Given B the probability of A does depend on C: B and A are not conditionally independent given A")
df <- expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup() |>
kable(caption = "Given A the probability of C does not depend on B: B and C are condtionally independent given A")
df
df |> group_by(A, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(C, B, A, p ) |> arrange(C, B)
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(C, B, A, p ) |> arrange(C, B)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()  |> select(B, A, C, p ) |> arrange(B, A, C)
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup() |> select(B, C, A, p ) |> arrange(B, C)
df |> group_by(B, A) |> summarize(p = p/sum(p))
df |> group_by(B, A) |> summarize(p = sum(p))
df |> group_by(B, A) |> summarize(p = sum(p)) |> group_by(B) |> mutate(p = p/sum(p))
df |> group_by(B) |> summarize(p = sum(p))
.4* 2/3 * .2
.4* (2/3) * .2
.4* (2/3) * .8
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(CausalQueries)
library(DeclareDesign)
expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2) |>
kable()
rho = 0
design <-
declare_model(N = 1000,
Y_Z_0 = rnorm(N),
Y_Z_1 = 1 + correlate(rnorm, given = Y_Z_0, rho = rho)) +
declare_inquiry(ate = mean(Y_Z_1 - Y_Z_0)) +
declare_assignment(Z = simple_ra(N), Y = reveal_outcomes(Y ~ Z)) +
declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)
design |> redesign(rho = seq(-1, 1, length = 5)) |>
diagnose_design(sims = 2000) |>
write_rds("saved/2.3.rds")
diagnosis <- read_rds("saved/2.3.rds")
expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2) |>
kable()
12/20
18/40
18/30
df
df |> arrange(B, C, A)
df |> arrange(C, B, A)
df |> arrange(C, A, B)
df |> arrange(A, C, B)
df |> group_by(B, C) |> mutate(p = p/sum(p)) |> ungroup()  |> filter(A==1)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()  |> filter(C==1)
df |> group_by(A, C) |> mutate(p = p/sum(p)) |> ungroup()  |> filter(B==1)
df |> group_by(A, B) |> mutate(p = p/sum(p)) |> ungroup()  |> select(B, A, C, p ) |> arrange(B, A, C)
df |> filter(C==1) |> summarize(sum(p))
df |> filter(C==1) |> mutate(p = p/sum(p)) |> filter(A==1) |> summarize(sum(p))
```{r}
df |> filter(A==1 & C==1) |> mutate(p = p/sum(p))
df |> filter(A==1 & C==1) |> summarise(p = p/sum(p))
df |> filter(A==1 & C==1) |> summarise(p = p/sum(p))
df |> filter(A==1 & C==1) |> mutate(p = p/sum(p))
.4*.6*.75
df |> filter(C==0) |> mutate(p = p/sum(p)) |> filter(A==1) |> summarize(sum(p))
df |> filter(A==1) |> mutate(p = p/sum(p)) |> filter(B==1) |> summarize(sum(p))
df |> filter(A==0) |> mutate(p = p/sum(p)) |> filter(B==1) |> summarize(sum(p))
model <- make_model(N = 10000,
C = rbinom(N, 1,  .4),
A = rbinom(N, 1, ifelse(C==1, .75, 1/3)),
B = rbinom(N, 1, ifelse(A==1, .6, .2)))
model <- make_model(N = 10000,
C = rbinom(N, 1,  .4),
A = rbinom(N, 1, prob = ifelse(C==1, .75, 1/3)),
B = rbinom(N, 1, prob = ifelse(A==1, .6, .2)))
model <- make_model(N = 10000,
C = rbinom(N, 1,  .4)
)
model <- declare_model(N = 10000,
C = rbinom(N, 1,  .4),
A = rbinom(N, 1, prob = ifelse(C==1, .75, 1/3)),
B = rbinom(N, 1, prob = ifelse(A==1, .6, .2)))
model() |> group_by(A, B, C) |> summarize(p = n()/10000)
model() |> group_by(A, B, C) |> summarize(p = n()/10000) |> round(2)
df |> filter(A==0) |> mutate(p = p/sum(p)) |> filter(B==1) |> summarize(sum(p))
df |> filter(A==1) |> mutate(p = p/sum(p)) |> filter(B==1) |> summarize(sum(p))
df |> filter(C==0) |> mutate(p = p/sum(p)) |> filter(A==1) |> summarize(sum(p))
df |> filter(C==1) |> mutate(p = p/sum(p)) |> filter(A==1) |> summarize(sum(p))
statement <-"X -> M -> Y; X <- C -> M; M <- D -> Y"
statement |> make_model() |> plot()
library(dagitty)
? dagitty::adjustmentSets
g <- dagitty( "dag{X -> M -> Y; X <- C -> M; M <- D -> Y}" )
adjustmentSets( g, "X", "Y" )
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tidyverse)
library(CausalQueries)
library(DeclareDesign)
g <-
declare_model(
L1 = add_level(N = 10, u = rnorm(N)),
L2 = add_level(N = 12, v = rnorm(N)))
g() |> slice(1:3, 13:15) |> kable()
Y_Z_0 <- rnorm(1000)
Y_Z_1 <- correlate(rnorm, given = Y_Z_0, rho = .5)
cor(Y_Z_0, Y_Z_1)
expand_grid(A=0:1, B = 0:1, C= 0:1)|>
mutate(p = c(.64, .16, .16, .04,  .16, .24, .24, .36)/2) |>
kable()
make_model("X -> M -> Y <-> X") |> plot(x_coord = 1:3, y_coord = c(1,1,1))
install.packages(c("askpass", "BH", "brew", "brio", "broom.helpers", "bslib", "CausalQueries", "checkmate", "chk", "class", "classInt", "cli", "cluster", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "DeclareDesign", "deldir", "desc", "DescTools", "digest", "directlabels", "downlit", "dplyr", "dreamerr", "DT", "e1071", "estimatr", "eurostat", "evaluate", "expm", "fabricatr", "fansi", "fastDummies", "fBasics", "fixest", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gert", "GGally", "ggh4x", "ggplot2", "ggrepel", "ggridges", "ggthemes", "glmnet", "glue", "googledrive", "googlesheets4", "graphlayouts", "gss", "gt", "gtable", "gtsummary", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "igraph", "import", "inlinedocs", "insight", "interp", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lintr", "lme4", "lpSolve", "lubridate", "magick", "maps", "marginaleffects", "markdown", "MASS", "MatchIt", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "modelsummary", "mvtnorm", "nlme", "nnet", "officer", "openssl", "packrat", "parameters", "patchwork", "pbapply", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "promises", "psych", "purrr", "quantreg", "quarto", "QuickJSR", "R.utils", "radiant.data", "ragg", "randomizr", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rio", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rpart", "RPostgres", "rprojroot", "rsconnect", "RSQLite", "rstan", "rstantools", "rstudioapi", "s2", "sampling", "sandwich", "sass", "scales", "sf", "shiny", "sp", "spatial", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "StanHeaders", "stringi", "stringr", "survival", "svglite", "systemfonts", "tensorA", "testthat", "texreg", "textshaping", "tidygraph", "tikzDevice", "timeDate", "timeSeries", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vdiffr", "viridis", "vroom", "vtable", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
install.packages(c("askpass", "BH", "brew", "brio", "broom.helpers", "bslib", "CausalQueries", "checkmate", "chk", "class", "classInt", "cli", "cluster", "covr", "cowplot", "cpp11", "credentials", "crosstalk", "curl", "cyclocomp", "dagitty", "data.table", "datawizard", "DBI", "dbplyr", "DeclareDesign", "deldir", "desc", "DescTools", "digest", "directlabels", "downlit", "dplyr", "dreamerr", "DT", "e1071", "estimatr", "eurostat", "evaluate", "expm", "fabricatr", "fansi", "fastDummies", "fBasics", "fixest", "FNN", "fontawesome", "foreign", "fs", "future", "future.apply", "gargle", "gert", "GGally", "ggh4x", "ggplot2", "ggrepel", "ggridges", "ggthemes", "glmnet", "glue", "googledrive", "googlesheets4", "graphlayouts", "gss", "gt", "gtable", "gtsummary", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "hunspell", "igraph", "import", "inlinedocs", "insight", "interp", "jsonlite", "KernSmooth", "knitr", "labeling", "labelled", "later", "lattice", "lifecycle", "lintr", "lme4", "lpSolve", "lubridate", "magick", "maps", "marginaleffects", "markdown", "MASS", "MatchIt", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "modelsummary", "mvtnorm", "nlme", "nnet", "officer", "openssl", "packrat", "parameters", "patchwork", "pbapply", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "processx", "progress", "promises", "psych", "purrr", "quantreg", "quarto", "QuickJSR", "R.utils", "radiant.data", "ragg", "randomizr", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "Rdpack", "reactR", "readr", "readxl", "rematch", "remotes", "reprex", "rio", "rlang", "rmarkdown", "rootSolve", "roxygen2", "rpart", "RPostgres", "rprojroot", "rsconnect", "RSQLite", "rstan", "rstantools", "rstudioapi", "s2", "sampling", "sandwich", "sass", "scales", "sf", "shiny", "sp", "spatial", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "StanHeaders", "stringi", "stringr", "survival", "svglite", "systemfonts", "tensorA", "testthat", "texreg", "textshaping", "tidygraph", "tikzDevice", "timeDate", "timeSeries", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vdiffr", "viridis", "vroom", "vtable", "waldo", "webshot", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
