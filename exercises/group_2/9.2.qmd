---
format: 
   revealjs:
    embed-resources: true
    theme: serif
    slide-level: 3
    slide-number: true
    show-slide-number: all
    preview-links: auto
    number-sections: false
    code-fold: show
    code-summary: "Show the code"
    scrollable: true
    echo: true
title: "Exercise 9.2"
author: "Eduard, Felix, Linus & Noah"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---


```{r setup, echo=FALSE}
# install and load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  DeclareDesign,
  CausalQueries,
  tidyverse,
  here,
  kableExtra
)

# fix simulation results
set.seed(1997)

# declare file location
here::i_am("9.2.qmd")
```


<!-- # Notes -->

<!-- - https://imai.fas.harvard.edu/projects/mechanisms.html -->


# Puzzle {.smaller}

**Mediation**

Baron Kenny have provided a popular method to implement mediation analysis.

Declare a design with a mediation process and possible violations of sequential ignorability, governed by some parameters `k`.

Demonstrate under what conditions  estimates using the Baron-Kenny procedure are misleading.


# Idea

## Mediator {.smaller}

What is the causal mechanism between X and Y?

*``In general, a given variable may be said to function as a mediator to the extent that it accounts for the relation between the predictor and the criterion.''* ([Baron & Kenny 1986, 1176](https://psycnet.apa.org/doi/10.1037/0022-3514.51.6.1173))

```{r, echo = FALSE, fig.height = 3, fig.width = 10}
make_model(
  "
    X -> M -> Y;
    X -> Y
  "
  ) |> 
  plot(
    x_coord = c(1, 2, 3),
    y_coord = c(1 ,3, 1)
    )
```

## Sequential ignorability {.smaller}

**Key assumption with two parts:**  (see [Imai et al. 2010, 310](https://doi.org/10.1037/a0020761)) 

1. conditional on the observed pretreatment covariates, the treatment is independent of all potential values of the outcome and mediating variables

2. the observed mediator is independent of all potential outcomes given the observed treatment and pretreatment covariates


## Violation of sequential ignorability

```{r, echo = FALSE, fig.height = 3, fig.width = 10}
make_model(
  "
    X -> M -> Y;
    X -> Y;
    M <- C -> Y
  "
  ) |> 
  plot(
    x_coord = c(4, 1, 3, 5),
    y_coord = c(3 ,1, 3, 1)
  )
```


## Baron-Kenny approach {.smaller}

Based on *linear structural equation model* (LSEM)

Three steps for mediation analysis: (see [Imai et al. 2010, 57](https://doi.apa.org/doi/10.1037/a0020761)) 

Effect of treatment on outcome: 
$$Y_i = \alpha_1 + \beta_1T_i + \varepsilon_{i1} \tag{1}$$

Effect of treatment on mediator: 
$$M_i = \alpha_2 + \beta_2T_i + \varepsilon_{i2} \tag{2}$$

Effect of treatment on outcome conditioned on the mediator: 
$$Y_i = \alpha_3 + \beta_3T_i + \gamma M_i + \varepsilon_{i3} \tag{3}$$


# Solution

## Parameter

```{r}
# parameter of unobserved confounder C 
k <- 0

# some other parameters
N <- 200
a <- 5
b <- 0.7
d <- 0.3
rho <- 0
```


## Model

```{r}
model_mediate <-
  declare_model(
    
    # units and shocks
    N = N,
    e1 = rnorm(N),
    e2 = rnorm(
      n = N,
      mean = rho * e1,
      sd = sqrt(1 - rho ^ 2)
    ),
    
    # confounding variable
    C = rnorm(N),
    
    # mediator
    potential_outcomes(
      M ~ 1 * (a * Z + k * C + e1 > 0)),
    
    # outcome
    potential_outcomes(
      Y ~ d * Z + b * M + k * C + e2, 
      conditions = list(M = 0:1, Z = 0:1)
    )
  )
```


## Potential Outcomes

```{r}
model_mediate() |> 
  select(contains("_Z_")) |> 
  head() |> 
  kable(digits = 2) |> 
  kable_styling(font_size = 20)
```


## Inquiry

```{r}
#| eval: false
inquiry_mediate <- 
  
  declare_inquiries(
  
    direct_Z_Y = mean(M_1_Z_1 - M_1_Z_0),
    
    direct_Z_M = mean(M_Z_1 - M_Z_0),
    
    mediated_Z_Y = mean(M_1_Z_1 - M_1_Z_0) - mean(M_0_Z_1 - M_0_Z_0),
    
    mediated_M_Y = mean(M_1_Z_1 - M_0_Z_1) - mean(M_0_Z_1 - M_0_Z_0)
  
  )
```


## Assignment & measurement

```{r}
assignment_mediate <- 
  declare_assignment(
    Z = complete_ra(N, prob = 0.5)
  ) 

measurement_mediate <-
  declare_measurement(
    M = reveal_outcomes(M ~ Z),
    Y = reveal_outcomes(Y ~ M + Z)
  )
```


## Estimators

```{r}
estimator_Z_Y <-
  declare_estimator(
    Y ~ Z,
    .method = lm_robust,
    label = "First regression"
  )

estimator_Z_M <-
  declare_estimator(
    M ~ Z,
    .method = lm_robust,
    label = "Second regression"
  )

estimator_mediate <-
  declare_estimator(
    Y ~ Z + M,
    .method = lm_robust,
    term = c("Z", "M"),
    label = c("Third regression")
  )
```


## Declare the design

```{r}
design_mediate <- 
  model_mediate +
  #inquiry_mediate +
  assignment_mediate +
  measurement_mediate +
  estimator_Z_Y +
  estimator_Z_M +
  estimator_mediate
```


```{r}
#| include: false
dat_test <- draw_data(design_mediate)
```

## Run design once

```{r}
#| code-fold: true
design_mediate |> 
  run_design() |> 
  kable(digits = 2) |> 
  kable_styling(font_size = 20)
```


## Redesign over parameter `k`

```{r}
redesign_mediate <- 
  design_mediate |> 
  redesign(k = seq(-1, 1, 0.01))
```


## Diagnose designs

```{r}
diagnose_mediate <- 
  redesign_mediate |> 
  diagnose_designs(
    sims = 100,
    bootstrap_sims = 100
  )

diagnosands_mediate <- 
  diagnose_mediate |> 
  get_diagnosands()
```


## Estimates of M & Z for different levels of `k`

```{r}
#| echo: false
#| fig.height: 3
#| fig.width: 10

diagnosands_mediate |> 
  ggplot(aes(
    x = k, 
    y = mean_estimate,
    color = term
    )) +
  geom_point() +
  facet_wrap(~estimator)
  
```


## Standard error of M & Z for different levels of `k`

```{r}
#| echo: false
#| fig.height: 3
#| fig.width: 10

diagnosands_mediate |> 
  ggplot(aes(
    x = k, 
    y = sd_estimate,
    color = term
    )) +
  geom_point() +
  facet_wrap(~estimator)
```


<!-- ## Power of M & Z for different levels of `k` -->

```{r}
#| include: false
#| echo: false
#| fig.height: 3
#| fig.width: 10

diagnosands_mediate |> 
  ggplot(aes(
    x = k, 
    y = power,
    color = term
    )) +
  geom_point() +
  facet_wrap(~estimator)
  
```






