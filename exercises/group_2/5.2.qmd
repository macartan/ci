---
format: 
   revealjs:
    embed-resources: true
    theme: serif
    slide-level: 3
    slide-number: true
    show-slide-number: all
    preview-links: auto
    number-sections: true
    code-fold: show
    code-summary: "Show the code"
    scrollable: true
    echo: true
title: "Exercise 5.2"
author: "Eduard, Felix, Linus & Noah"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---


```{r setup, echo=FALSE}
# install and load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  DeclareDesign,
  ri2,
  tidyverse,
  here,
  kableExtra
)

# declare file location
here::i_am("5.2.qmd")
```

# Puzzle {.smaller}

**randomization inferences**

Declare a factorial design with two binary treatments and an interaction between them. For example $Y = .1*X1 + .3*X2 -  .2*X1*X2$

Have a non-stochastic model declaration so that the only source of randomness is in the assignment procedure.

Calculate a $p$ values for the null hypothesis of *no interaction between treatments* using randomization inference. 

* Bonus: Can you check the validity of the p value using the simulations dataframe?

Hint: You can use the `ri2` package.  Hint you can keep the top level fixed by declaring shocks outside the design (`U <- rnorm(N)`) or by using a simulation vector in diagnosis (`sims = c(1,1,500, 1, ...)`)

# Solution

## Model declaration

### Parameter

```{r}
set.seed(2024)
CATE_Z1_Z2_0 <- 0.1
CATE_Z2_Z1_0 <- 0.3
interaction <- -0.2
N <- 100
U <- rnorm(N)
```


### Model

```{r}
ri_model <- 
  declare_model(
    N = N,
    U = U,
    potential_outcomes(
      Y ~ CATE_Z1_Z2_0 * Z1 + CATE_Z2_Z1_0 * Z2 + interaction * Z1 * Z2 + U,
      conditions = list(
        Z1 = c(0, 1),
        Z2 = c(0, 1)
      )
    )
  )
```


### Data strategy

```{r}
ri_assignment <- 
   declare_assignment(
    Z1 = complete_ra(N),
    Z2 = block_ra(Z1)
  )

ri_measurement <- 
  declare_measurement(
    Y = reveal_outcomes(Y ~ Z1 + Z2)
  )

ri_estimator <-
  declare_estimator(
    Y ~ Z1 + Z2 + Z1 * Z2, term = "Z1:Z2"
  )
```


### Declare the design

```{r}
ri_design <- 
  ri_model +
  ri_assignment +
  ri_measurement +
  ri_estimator
```


### Run the design

```{r}
ri_design |>
  run_design() |> 
  kable(digits = 2) |> 
  kable_styling(font_size = 20)
```


## Randomization inference


### Generate data

```{r}
ri_dat <- ri_design |> 
  draw_data()
```

```{r}
#| code-fold: true
ri_dat |> 
  head() |>
  kable(digits = 2) |> 
  kable_styling(font_size = 20)
```

### Null: constant effects

```{r}
(ate_hat <- coef(lm(Y ~ Z1 + Z2, data = ri_dat))[2])
```


### Declare assignment scheme

```{r}
ri_decleration <- declare_ra(
  N = N,
  m = N/2
)
```


### Use `ri2` to estimate p-value

```{r}
(ri_res <-
  conduct_ri(
    model_1 = Y ~ Z1 + Z2, # restricted model
    model_2 = Y ~ Z1 + Z2 + Z1 * Z2, # unrestricted model
    declaration = ri_decleration,
    assignment = "Z1",
    sharp_hypothesis = ate_hat,
    data = ri_dat
  ))
```


### Distribution of F-statistics

```{r}
#| code-fold: true
ri_res |> plot()
```
