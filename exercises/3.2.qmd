---
format: 
   revealjs:
    embed-resources: true
    theme: serif
    slide-level: 3
    slide-number: true
    show-slide-number: all
    preview-links: auto
    number-sections: true
    code-fold: show
    code-summary: "Show the code"
    scrollable: true
    echo: true
title: "Exercise 3.2"
author: "Eduard, Felix, Linus & Noah"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---


```{r setup, echo=FALSE}
# install and load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
  rstan,
  dagitty,
  DeclareDesign,
  CausalQueries,
  ri2,
  tidyverse,
  knitr,
  here,
  kableExtra
)

```


# Puzzle

* Consider an outcome Y that can be affected by two variables X1 and X2 but say that X2 can itself be affected by X1. Write down possible potential outcomes for Y1 and X2 when: X1 causes X2 and Y, but X1 does not cause Y through X2.

# DAG

```{r, echo = FALSE}
dagitty("dag {X1 -> X2 -> Y X1 ->Y}") %>%
  plot()
```

# Strategy

* ABCD Types

* Y(X1 = 1) as the outcome when X1 = 1 and X2 is equal to whatever value it takes when X1 = 1

* -> Strategy: Looking at all possible type combinations of X1 in relation to X2 and Y and writing all possible outcomes.

```{r, echo = FALSE}
outcomes <- expand_grid(
  "Type X2" = c("a", "b", "c", "d"),
  "Type Y" = c("a", "b", "c", "d"),
  "Y(0,0)" = as.character(NA),
  "Y(1,0)" = as.character(NA),
  "Y(0,1)" = as.character(NA),
  "Y(1,1)" = as.character(NA),
  "X2(0)" = as.character(NA),
  "X2(1)" = as.character(NA)
) %>%
  mutate(
    `X2(0)` = case_when(
      `Type X2` == "a" ~ 1,
      `Type X2` == "b" ~ 0,
      `Type X2` == "c" ~ 0,
      `Type X2` == "d" ~ 1
    ),
    `X2(1)` = case_when(
      `Type X2` == "a" ~ 0,
      `Type X2` == "b" ~ 1,
      `Type X2` == "c" ~ 0,
      `Type X2` == "d" ~ 1
    )
  ) %>%
  mutate(
      `Y(0,0)` = case_when(
      `Type Y` == "a" & `X2(0)` == "0" ~ "1",
      `Type Y` == "b" & `X2(0)` == "0" ~ "0",
      `Type Y` == "c" & `X2(0)` == "0" ~ "0",
      `Type Y` == "d" & `X2(0)` == "0" ~ "1",
      `X2(0)` == "1" ~ "-"
    ),
    `Y(1,0)` = case_when(
      `Type Y` == "a" & `X2(1)` == "0" ~ "0",
      `Type Y` == "b" & `X2(1)` == "0" ~ "1",
      `Type Y` == "c" & `X2(1)` == "0" ~ "0",
      `Type Y` == "d" & `X2(1)` == "0" ~ "1",
      `X2(1)` == "1" ~ "-"
    ),
    `Y(0,1)` = case_when(
      `Type Y` == "a" & `X2(0)` == "1" ~ "1",
      `Type Y` == "b" & `X2(0)` == "1" ~ "0",
      `Type Y` == "c" & `X2(0)` == "1" ~ "0",
      `Type Y` == "d" & `X2(0)` == "1" ~ "1",
      `X2(0)` == "0" ~ "-"
    ),
    `Y(1,1)` = case_when(
      `Type Y` == "a" & `X2(1)` == "1" ~ "0",
      `Type Y` == "b" & `X2(1)` == "1" ~ "1",
      `Type Y` == "c" & `X2(1)` == "1" ~ "0",
      `Type Y` == "d" & `X2(1)` == "1" ~ "1",
      `X2(1)` == "0" ~ "-"
    )
  ) 

```

# X2 - Type A

```{r, echo = FALSE}
outcomes %>%
  slice(1:4) %>%
  kable()
```

# X2 - Type B

```{r, echo = FALSE}
outcomes %>%
  slice(5:8) %>%
  kable()
```

# X2 - Type C

```{r, echo = FALSE}
outcomes %>%
  slice(9:12) %>%
  kable()
```

# X2 - Type D

```{r, echo = FALSE}
outcomes %>%
  slice(13:16) %>%
  kable()
```





