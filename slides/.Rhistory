rm(list = ls())
set.seed(343)
suppressMessages({
library(DeclareDesign)
library(xtable)
library(knitr)
library(sandwich)
library(lmtest)
library(ggplot2)
library(dplyr)
})
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = TRUE, message = FALSE,
eval = TRUE, tidy = FALSE, tidy.opts = list(width.cutoff = 50),
strip_white = FALSE, results = 'asis', fix.ext = 'pdf', cache = TRUE)
population    <- declare_population(
noise = "rnorm(n_)",
income_bracket = "sample(1:4, n_, replace = TRUE)",
size = 5000,
super_population = TRUE)
population    <- declare_population(
noise = "rnorm(n_)",
income_bracket = "sample(1:4, n_, replace = TRUE)",
size = 5000)
potential_outcomes <- declare_potential_outcomes(
condition_names = c("control", "treatment"),
formula =
Y ~ .1 * (Z == "treatment") +
.1 * (Z == "treatment") * income_bracket +
noise)
sampling <- declare_sampling(n = 100)
assignment <- declare_assignment(
potential_outcomes  = potential_outcomes,
block_variable_name = "income_bracket",
block_probabilities = rbind(c(.1, .9),
c(.3, .7),
c(.7, .3),
c(.6, .4)))
estimand_ATE <- declare_estimand(
estimand_text = "mean(Y_Z_treatment - Y_Z_control)",
potential_outcomes = potential_outcomes)
estimator_lsdv <- declare_estimator(
formula           = Y ~ Z + factor(income_bracket),
model             = lm,
estimates         = get_regression_coefficient,
coefficient_name  = "Ztreatment",
estimand          = estimand_ATE,
labels            = "LSDV")
my_design <- declare_design(
population         = population,
potential_outcomes = potential_outcomes,
sampling           = sampling,
assignment         = assignment,
estimator          = estimator_lsdv
)
another_design <- quick_design(template = simple_template,
N=20, n = 10)
simple_template <- function(N = 5000,
n = 100,
potential_outcomes_formula = Y ~ 5 + Z+.5*Z*noise1 + noise2,
noise1 = "rnorm(n_)", noise2 = "rnorm(n_)",
potential_outcomes_condition_names = c(0, 1),
assignment_variable_name = "Z",
assignment_probability_each = c(.7, .3),
estimand_text = "mean(Y_Z_1 - Y_Z_0)",
estimator_function = difference_in_means,
estimator_formula = Y ~ Z
){
population <- declare_population(noise1 = noise1, noise2 = noise2, size = N)
sampling <- declare_sampling(n = n)
potential_outcomes <-
declare_potential_outcomes(formula = potential_outcomes_formula,
condition_names = potential_outcomes_condition_names,
assignment_variable_name = assignment_variable_name)
assignment <- declare_assignment(potential_outcomes = potential_outcomes,
probability_each = assignment_probability_each,
assignment_variable_name = assignment_variable_name)
estimand <- declare_estimand(estimand_text = estimand_text,
potential_outcomes = potential_outcomes)
estimator <- declare_estimator(estimates = estimator_function,
formula = estimator_formula,
estimand = estimand)
design <- declare_design(population = population,
sampling = sampling,
assignment = assignment,
estimator = estimator,
potential_outcomes = potential_outcomes,
label = "Simple Design")
return(design)
}
another_design <- quick_design(template = simple_template,
N=20, n = 10)
another_design <- modify_design(my_design,
estimator = estimator_robust)
another_design <- quick_design(template = simple_template,
N=20, n = 10)
draw_data(design = my_design)
mock_data <- draw_data(design = my_design)
rm(list = ls())
rm(list = ls())
set.seed(343)
suppressMessages({
library(DeclareDesign)
library(xtable)
library(knitr)
library(sandwich)
library(lmtest)
library(ggplot2)
library(dplyr)
})
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, error = TRUE, message = FALSE,
eval = TRUE, tidy = FALSE, tidy.opts = list(width.cutoff = 50),
strip_white = FALSE, results = 'asis', fix.ext = 'pdf', cache = TRUE)
po.graph = function(N, Y0,Y1,u, Z, yl = "Y(0) & Y(1)"){
par(mfrow=c(2,2))
plot(u, Y0, ylim=c(-3, 4), xlim=c(1,N), xlab="u", ylab=yl)
lines(u, Y1, type = "p", col="red")
title("Y(1) and Y(0) for all units ")
plot(u, Y1-Y0, type = "h", ylim=c(-3, 4), xlim=c(1,N),main = "Y(1) - Y(0)", xlab="u", ylab=yl)
abline(h=0, col="red"); abline(h=mean(Y1-Y0), col="red")
plot(u[Z==0], Y0[Z==0], ylim=c(-3, 4), xlim=c(1,N), main = "Y(1| Z=1) and Y(0| Z=0)", xlab="u", ylab=yl)
abline(h=mean(Y0[Z==0]))
lines(u[Z==1], Y1[Z==1], type = "p", col="red")
abline(h=mean(Y1[Z==1]), col="red")
plot(u[Z==0&u<=N/2], Y0[Z==0&u<=N/2], ylim=c(-3, 4), xlim=c(1,N),
main = "Subgroup ATEs", xlab="u", ylab = yl)
segments(0, mean(Y0[Z==0 & u<=N/2]), N/2, mean(Y0[Z==0 & u<=N/2]), lwd =  1.3)
lines(u[Z==1 & u<=N/2], Y1[Z==1 & u<=N/2], type="p",ylim=c(-3, 4), col="red")
segments(0, mean(Y1[Z==1 & u<=N/2]), N/2, mean(Y1[Z==1 & u<=N/2]), lwd =  1.3, col="red")
lines(u[Z==0 & u>N/2], Y0[Z==0 & u>N/2], type = "p", ylim=c(-3, 4), xlim=c(1,N))
segments(1+N/2, mean(Y0[Z==0 & u>N/2]), N, mean(Y0[Z==0 & u>N/2]), lwd =  1.3)
points(u[Z==1 & u>N/2], Y1[Z==1 & u>N/2], type="p", ylim=c(-3, 4), col="red")
segments(1+N/2, mean(Y1[Z==1 & u>N/2]), N, mean(Y1[Z==1 & u>N/2]), lwd =  1.3, col="red")
}
N  <- 100
u  <- seq(1:N)
Y0 <- rnorm(N)
Y1 <- rnorm(N) + 1
Z  <- 1:N %in% sample(N, N/2)
po.graph(N, Y0, Y1, u, Z)
po.graph(N, Y0 - u/50, Y1+u/50, u,Z)
pop_draws <- 200
simple_template <- function(N = 5000,
n = 100,
potential_outcomes_formula = Y ~ 5 + Z+.5*Z*noise1 + noise2,
noise1 = "rnorm(n_)", noise2 = "rnorm(n_)",
potential_outcomes_condition_names = c(0, 1),
assignment_variable_name = "Z",
assignment_probability_each = c(.7, .3),
estimand_text = "mean(Y_Z_1 - Y_Z_0)",
estimator_function = difference_in_means,
estimator_formula = Y ~ Z
){
population <- declare_population(noise1 = noise1, noise2 = noise2, size = N)
sampling <- declare_sampling(n = n)
potential_outcomes <-
declare_potential_outcomes(formula = potential_outcomes_formula,
condition_names = potential_outcomes_condition_names,
assignment_variable_name = assignment_variable_name)
assignment <- declare_assignment(potential_outcomes = potential_outcomes,
probability_each = assignment_probability_each,
assignment_variable_name = assignment_variable_name)
estimand <- declare_estimand(estimand_text = estimand_text,
potential_outcomes = potential_outcomes)
estimator <- declare_estimator(estimates = estimator_function,
formula = estimator_formula,
estimand = estimand)
design <- declare_design(population = population,
sampling = sampling,
assignment = assignment,
estimator = estimator,
potential_outcomes = potential_outcomes,
label = "Simple Design")
return(design)
}
population    <- declare_population(
noise = "rnorm(n_)",
income_bracket = "sample(1:4, n_, replace = TRUE)",
size = 5000,
super_population = TRUE)
potential_outcomes <- declare_potential_outcomes(
condition_names = c("control", "treatment"),
formula =
Y ~ .1 * (Z == "treatment") +
.1 * (Z == "treatment") * income_bracket +
noise)
sampling <- declare_sampling(n = 100)
assignment <- declare_assignment(
potential_outcomes  = potential_outcomes,
block_variable_name = "income_bracket",
block_probabilities = rbind(c(.1, .9),
c(.3, .7),
c(.7, .3),
c(.6, .4)))
estimand_ATE <- declare_estimand(
estimand_text = "mean(Y_Z_treatment - Y_Z_control)",
potential_outcomes = potential_outcomes)
estimator_lsdv <- declare_estimator(
formula           = Y ~ Z + factor(income_bracket),
model             = lm,
estimates         = get_regression_coefficient,
coefficient_name  = "Ztreatment",
estimand          = estimand_ATE,
labels            = "LSDV")
my_design <- declare_design(
population         = population,
potential_outcomes = potential_outcomes,
sampling           = sampling,
assignment         = assignment,
estimator          = estimator_lsdv
)
another_design <- quick_design(template = simple_template,
N=20, n = 10)
mock_data <- draw_data(design = my_design)
mock_tab <- head(mock_data[, c("Y_Z_control", "Y_Z_treatment", "Z","Y","noise", "income_bracket")])
get_estimates(estimator = my_design$estimator,
data      = mock_data)
